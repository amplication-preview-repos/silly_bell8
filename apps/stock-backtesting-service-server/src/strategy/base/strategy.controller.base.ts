/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StrategyService } from "../strategy.service";
import { StrategyCreateInput } from "./StrategyCreateInput";
import { Strategy } from "./Strategy";
import { StrategyFindManyArgs } from "./StrategyFindManyArgs";
import { StrategyWhereUniqueInput } from "./StrategyWhereUniqueInput";
import { StrategyUpdateInput } from "./StrategyUpdateInput";
import { BacktestResultFindManyArgs } from "../../backtestResult/base/BacktestResultFindManyArgs";
import { BacktestResult } from "../../backtestResult/base/BacktestResult";
import { BacktestResultWhereUniqueInput } from "../../backtestResult/base/BacktestResultWhereUniqueInput";

export class StrategyControllerBase {
  constructor(protected readonly service: StrategyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Strategy })
  async createStrategy(
    @common.Body() data: StrategyCreateInput
  ): Promise<Strategy> {
    return await this.service.createStrategy({
      data: data,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Strategy] })
  @ApiNestedQuery(StrategyFindManyArgs)
  async strategies(@common.Req() request: Request): Promise<Strategy[]> {
    const args = plainToClass(StrategyFindManyArgs, request.query);
    return this.service.strategies({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Strategy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async strategy(
    @common.Param() params: StrategyWhereUniqueInput
  ): Promise<Strategy | null> {
    const result = await this.service.strategy({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Strategy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStrategy(
    @common.Param() params: StrategyWhereUniqueInput,
    @common.Body() data: StrategyUpdateInput
  ): Promise<Strategy | null> {
    try {
      return await this.service.updateStrategy({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Strategy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStrategy(
    @common.Param() params: StrategyWhereUniqueInput
  ): Promise<Strategy | null> {
    try {
      return await this.service.deleteStrategy({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/backtestResults")
  @ApiNestedQuery(BacktestResultFindManyArgs)
  async findBacktestResults(
    @common.Req() request: Request,
    @common.Param() params: StrategyWhereUniqueInput
  ): Promise<BacktestResult[]> {
    const query = plainToClass(BacktestResultFindManyArgs, request.query);
    const results = await this.service.findBacktestResults(params.id, {
      ...query,
      select: {
        backtestDate: true,
        createdAt: true,
        finalCapital: true,
        id: true,
        initialCapital: true,

        strategy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/backtestResults")
  async connectBacktestResults(
    @common.Param() params: StrategyWhereUniqueInput,
    @common.Body() body: BacktestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backtestResults: {
        connect: body,
      },
    };
    await this.service.updateStrategy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/backtestResults")
  async updateBacktestResults(
    @common.Param() params: StrategyWhereUniqueInput,
    @common.Body() body: BacktestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backtestResults: {
        set: body,
      },
    };
    await this.service.updateStrategy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/backtestResults")
  async disconnectBacktestResults(
    @common.Param() params: StrategyWhereUniqueInput,
    @common.Body() body: BacktestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      backtestResults: {
        disconnect: body,
      },
    };
    await this.service.updateStrategy({
      where: params,
      data,
      select: { id: true },
    });
  }
}
