/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Strategy as PrismaStrategy,
  BacktestResult as PrismaBacktestResult,
} from "@prisma/client";

export class StrategyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StrategyCountArgs, "select">): Promise<number> {
    return this.prisma.strategy.count(args);
  }

  async strategies(
    args: Prisma.StrategyFindManyArgs
  ): Promise<PrismaStrategy[]> {
    return this.prisma.strategy.findMany(args);
  }
  async strategy(
    args: Prisma.StrategyFindUniqueArgs
  ): Promise<PrismaStrategy | null> {
    return this.prisma.strategy.findUnique(args);
  }
  async createStrategy(
    args: Prisma.StrategyCreateArgs
  ): Promise<PrismaStrategy> {
    return this.prisma.strategy.create(args);
  }
  async updateStrategy(
    args: Prisma.StrategyUpdateArgs
  ): Promise<PrismaStrategy> {
    return this.prisma.strategy.update(args);
  }
  async deleteStrategy(
    args: Prisma.StrategyDeleteArgs
  ): Promise<PrismaStrategy> {
    return this.prisma.strategy.delete(args);
  }

  async findBacktestResults(
    parentId: string,
    args: Prisma.BacktestResultFindManyArgs
  ): Promise<PrismaBacktestResult[]> {
    return this.prisma.strategy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .backtestResults(args);
  }
}
