/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BacktestResult as PrismaBacktestResult,
  Strategy as PrismaStrategy,
} from "@prisma/client";

export class BacktestResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BacktestResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.backtestResult.count(args);
  }

  async backtestResults(
    args: Prisma.BacktestResultFindManyArgs
  ): Promise<PrismaBacktestResult[]> {
    return this.prisma.backtestResult.findMany(args);
  }
  async backtestResult(
    args: Prisma.BacktestResultFindUniqueArgs
  ): Promise<PrismaBacktestResult | null> {
    return this.prisma.backtestResult.findUnique(args);
  }
  async createBacktestResult(
    args: Prisma.BacktestResultCreateArgs
  ): Promise<PrismaBacktestResult> {
    return this.prisma.backtestResult.create(args);
  }
  async updateBacktestResult(
    args: Prisma.BacktestResultUpdateArgs
  ): Promise<PrismaBacktestResult> {
    return this.prisma.backtestResult.update(args);
  }
  async deleteBacktestResult(
    args: Prisma.BacktestResultDeleteArgs
  ): Promise<PrismaBacktestResult> {
    return this.prisma.backtestResult.delete(args);
  }

  async getStrategy(parentId: string): Promise<PrismaStrategy | null> {
    return this.prisma.backtestResult
      .findUnique({
        where: { id: parentId },
      })
      .strategy();
  }
}
