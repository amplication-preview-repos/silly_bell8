/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BacktestResult } from "./BacktestResult";
import { BacktestResultCountArgs } from "./BacktestResultCountArgs";
import { BacktestResultFindManyArgs } from "./BacktestResultFindManyArgs";
import { BacktestResultFindUniqueArgs } from "./BacktestResultFindUniqueArgs";
import { CreateBacktestResultArgs } from "./CreateBacktestResultArgs";
import { UpdateBacktestResultArgs } from "./UpdateBacktestResultArgs";
import { DeleteBacktestResultArgs } from "./DeleteBacktestResultArgs";
import { Strategy } from "../../strategy/base/Strategy";
import { BacktestResultService } from "../backtestResult.service";
@graphql.Resolver(() => BacktestResult)
export class BacktestResultResolverBase {
  constructor(protected readonly service: BacktestResultService) {}

  async _backtestResultsMeta(
    @graphql.Args() args: BacktestResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BacktestResult])
  async backtestResults(
    @graphql.Args() args: BacktestResultFindManyArgs
  ): Promise<BacktestResult[]> {
    return this.service.backtestResults(args);
  }

  @graphql.Query(() => BacktestResult, { nullable: true })
  async backtestResult(
    @graphql.Args() args: BacktestResultFindUniqueArgs
  ): Promise<BacktestResult | null> {
    const result = await this.service.backtestResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BacktestResult)
  async createBacktestResult(
    @graphql.Args() args: CreateBacktestResultArgs
  ): Promise<BacktestResult> {
    return await this.service.createBacktestResult({
      ...args,
      data: {
        ...args.data,

        strategy: args.data.strategy
          ? {
              connect: args.data.strategy,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BacktestResult)
  async updateBacktestResult(
    @graphql.Args() args: UpdateBacktestResultArgs
  ): Promise<BacktestResult | null> {
    try {
      return await this.service.updateBacktestResult({
        ...args,
        data: {
          ...args.data,

          strategy: args.data.strategy
            ? {
                connect: args.data.strategy,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BacktestResult)
  async deleteBacktestResult(
    @graphql.Args() args: DeleteBacktestResultArgs
  ): Promise<BacktestResult | null> {
    try {
      return await this.service.deleteBacktestResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Strategy, {
    nullable: true,
    name: "strategy",
  })
  async getStrategy(
    @graphql.Parent() parent: BacktestResult
  ): Promise<Strategy | null> {
    const result = await this.service.getStrategy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
