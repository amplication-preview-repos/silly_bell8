/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BacktestResultService } from "../backtestResult.service";
import { BacktestResultCreateInput } from "./BacktestResultCreateInput";
import { BacktestResult } from "./BacktestResult";
import { BacktestResultFindManyArgs } from "./BacktestResultFindManyArgs";
import { BacktestResultWhereUniqueInput } from "./BacktestResultWhereUniqueInput";
import { BacktestResultUpdateInput } from "./BacktestResultUpdateInput";

export class BacktestResultControllerBase {
  constructor(protected readonly service: BacktestResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BacktestResult })
  async createBacktestResult(
    @common.Body() data: BacktestResultCreateInput
  ): Promise<BacktestResult> {
    return await this.service.createBacktestResult({
      data: {
        ...data,

        strategy: data.strategy
          ? {
              connect: data.strategy,
            }
          : undefined,
      },
      select: {
        backtestDate: true,
        createdAt: true,
        finalCapital: true,
        id: true,
        initialCapital: true,

        strategy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BacktestResult] })
  @ApiNestedQuery(BacktestResultFindManyArgs)
  async backtestResults(
    @common.Req() request: Request
  ): Promise<BacktestResult[]> {
    const args = plainToClass(BacktestResultFindManyArgs, request.query);
    return this.service.backtestResults({
      ...args,
      select: {
        backtestDate: true,
        createdAt: true,
        finalCapital: true,
        id: true,
        initialCapital: true,

        strategy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BacktestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async backtestResult(
    @common.Param() params: BacktestResultWhereUniqueInput
  ): Promise<BacktestResult | null> {
    const result = await this.service.backtestResult({
      where: params,
      select: {
        backtestDate: true,
        createdAt: true,
        finalCapital: true,
        id: true,
        initialCapital: true,

        strategy: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BacktestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBacktestResult(
    @common.Param() params: BacktestResultWhereUniqueInput,
    @common.Body() data: BacktestResultUpdateInput
  ): Promise<BacktestResult | null> {
    try {
      return await this.service.updateBacktestResult({
        where: params,
        data: {
          ...data,

          strategy: data.strategy
            ? {
                connect: data.strategy,
              }
            : undefined,
        },
        select: {
          backtestDate: true,
          createdAt: true,
          finalCapital: true,
          id: true,
          initialCapital: true,

          strategy: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BacktestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBacktestResult(
    @common.Param() params: BacktestResultWhereUniqueInput
  ): Promise<BacktestResult | null> {
    try {
      return await this.service.deleteBacktestResult({
        where: params,
        select: {
          backtestDate: true,
          createdAt: true,
          finalCapital: true,
          id: true,
          initialCapital: true,

          strategy: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
